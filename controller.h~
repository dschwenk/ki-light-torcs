/*	controller class template for AI Light Torcs project
	author: Robin Lehmann
	date: 12.04.2012
*/
#ifndef CONTROLLER_H_
#define CONTROLLER_H_

#include "CarState.h"
#include "CarControl.h"

using namespace std;
#include <vector>
#include "LineVector.h"
	

class Controller
{
public:
	Controller();
	~Controller();


	// Logginzwecke	
	ostringstream SensorDataStream;
	string SensorDataString;

	// Vektor, der alle Objekte (Zeilen/Vektoren) der Trainingsdatei beinhaltet
	vector<LineVector*> LogFileLineVektorList;

	/*
	float currentLowest_accel;
	float currentLowest_brake;
	float currentLowest_steer;
	int currentLowest_gear;
	*/

	// automated Control for the car
	virtual void generateVector(CarState* cs, CarControl* cc);

	// get controller name
	virtual string getControllerName() { return "standard controller"; };

private:
	// subfunction for the automated control
	float accelControl(CarState* cs, CarControl* cc);

	// subfunction for the automated control
	float brakeControl(CarState* cs, CarControl* cc);

	// subfunction for the automated control
	float steerControl(CarState* cs, CarControl* cc);

	// subfunction for the automated control
	float clutchControl(CarState* cs, CarControl* cc);

	// subfunction for the automated control
	int gearControl(CarState* cs, CarControl* cc);


	// Berechnung des naechsten Nachbarn
	void calcNearestNeighbour(CarState* cs, CarControl* cc);

	// Berechnung der naechsten K Nachbarn
	void calcKNearestNeighbour(CarState* cs, CarControl* cc);

};

#endif
